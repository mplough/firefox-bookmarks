"""Extract links from an HTML bookmarks file exported from Firefox.

A Firefox bookmarks file doesn't make bookmarks available in a form that's easy to work with.
This tool solves that problem.

LIMITATIONS
You can have two folders with the same name in the same folder.
These will get condensed down to one folder.
"""

from collections import namedtuple, OrderedDict
import json
import sys

from bs4 import BeautifulSoup
import click


FirefoxLink = namedtuple('FirefoxLink', ['address', 'name', 'folders', 'attrs'])


def parse_links(root, folders=None):
    """Generate all links in an HTML bookmark file exported from Firefox.

    The doctype of this file claims to be "NETSCAPE-Bookmark-file-1".
    """

    # convenience so we can call with no args.
    if folders is None:
        folders = []
        root = root.find('dl')

    for e in root.find_all('dt', recursive=False):
        for link in e.find_all('a', recursive=False):
            if link.get('href').startswith('place:'):
                # Skip recents and other autogenerated bookmark lists
                continue
            yield FirefoxLink(
                link.get('href'),
                link.string,
                folders,
                {attr: link.get(attr) for attr in link.attrs if attr != 'href'},
            )

        for folder in e.find_all('h3', recursive=False):
            folder_name = folder.string
            folder_dl = folder.find_next_sibling('dl')
            yield from parse_links(folder_dl, folders + [folder_name])


def parse_links_from_file(filename):
    with open(filename) as f:
        soup = BeautifulSoup(f, 'html5lib')
    yield from parse_links(soup)


def dump_bookmarks_json(links, **kwargs):
    return json.dumps(
        [{attr: getattr(link, attr) for attr in link._fields} for link in links],
        **kwargs
    )


@click.group(help=__doc__)
def cli():
    pass


@cli.command('extract')
@click.argument('bookmarks_filename')
def click_extract(bookmarks_filename):
    """Extract bookmarks in a bookmarks HTML file to structured JSON."""
    print(dump_bookmarks_json(parse_links_from_file(bookmarks_filename), indent=4))


@cli.command('merge')
@click.argument('primary_bookmarks_filename')
@click.argument('secondary_bookmarks_filename')
def click_merge(primary_bookmarks_filename, secondary_bookmarks_filename):
    """Merge bookmarks.

    What does it mean to merge bookmarks?
    - if the same bookmark shows up with the same title and location in multiple files, it should
      only show up once in the merged file.
    - preserve ordering of folders and bookmarks within those folders.  List bookmarks from each
      file in order, file by file.
    - preserve ordering of folders and links.  A folder may appear anywhere in a list of links, not
      just first or last.

      This means we need to have a bookmark object and a folder object.
      A folder object has a name and contains an ordered list of folder objects and bookmark objects.
      A bookmark object contains a name and an address.
    """
    primary_bookmarks = list(parse_links_from_file(primary_bookmarks_filename))
    secondary_bookmarks = list(parse_links_from_file(secondary_bookmarks_filename))

    primary_addresses = {bookmark.address for bookmark in primary_bookmarks}

    deduplicated_secondary_bookmarks = []
    for bookmark in secondary_bookmarks:
        if bookmark.address in primary_addresses:
            print(f'Dupe: {bookmark.address}', file=sys.stderr)
        else:
            bookmark = bookmark._replace(
                folders=[secondary_bookmarks_filename] + bookmark.folders
            )
            deduplicated_secondary_bookmarks.append(bookmark)

    merged_bookmarks = primary_bookmarks + deduplicated_secondary_bookmarks
    print(dump_bookmarks_json(merged_bookmarks, indent=4))



@cli.command('aux-folder-tree')
@click.argument('bookmarks_json_filename')
def click_aux_folder_tree(bookmarks_json_filename):
    """Make the folders into a tree."""
    with open(bookmarks_json_filename) as f:
        bookmarks = json.load(f)

    for b in bookmarks:
        print(b['folders'])


    root = OrderedDict()




if __name__ == '__main__':
    cli()
